<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class NsmUser extends BaseNsmUser implements AppKitUserPreferences
{

	const HASH_ALGO = 'sha256';
	
	public function setUp () {

		parent::setUp();

		$this->hasMany('NsmRole', array (	'local'		=> 'usro_user_id',
											'foreign'	=> 'usro_role_id',
											'refClass'	=> 'NsmUserRole'));

        $options = array (
        	'created' =>  array('name'	=> 'user_created'),
        	'updated' =>  array('name'	=> 'user_modified'),
        );

		$this->actAs('Timestampable', $options);

	}
	
	public function givenName() {
		if ($this->user_lastname && $this->user_firstname) {
			return sprintf('%s, %s', $this->user_lastname, $this->user_firstname);	
		}
		else {
			return $this->user_name;
		}
	}
	
	public function hasRoleAssigned($role_id) {
		foreach ($this->NsmRole as $role) {
			if ($role_id == $role->role_id) {
				return true;
			}
		}
		
		return false;
	}
	
	private function __updatePassword($password) {
		$this->user_salt = $this->__createSalt($this->user_name);
		$this->user_password = hash_hmac(self::HASH_ALGO, $password, $this->user_salt);
	}
	
	private function __createSalt($entropy) {
		return hash(self::HASH_ALGO, uniqid($entropy. '_', mt_rand()));
	}
	
	public function updatePassword($password) {
		if ($this->state() !== self::STATE_TDIRTY) {
			$this->__updatePassword($password);
		}
		else {
			throw new AppKitDoctrineException('Could not change a password on a not existing record!');
		}
		
		return false;
	}
	
	/**
	 * Sets a pref value
	 * @param string $key
	 * @param mixed $val
	 * @param boolean $overwrite
	 * @return unknown_type
	 * @throws AppKitException
	 * @author Marius Hein
	 */
	public function setPref($key, $val, $overwrite = true) {
		
		try {
			$pref = $this->getPrefObject($key);
			
			// DO NOT OVERWRITE
			if ($overwrite === false) return false;
			
			$pref->upref_val = $val;
			$pref->save();
		}
		catch (AppKitDoctrineException $e) {
			$pref = new NsmUserPreference();
			$pref->upref_key = $key;
			$pref->upref_val = $val;
			$pref->NsmUser = $this;
			$pref->save();
		}
		
		return true;
	}
	
	/**
	 * Returns a preferenceobject from a user
	 * @param string $key
	 * @return NsmUserPreference
	 * @throws AppKitDoctrineException
	 * @author Marius Hein
	 */
	public function getPrefObject($key) {
		$res = Doctrine_Query::create()
		->from('NsmUserPreference p')
		->where('p.upref_user_id=? and p.upref_key=?', array($this->user_id, $key))
		->limit(1)
		->execute();
		
		if ($res->count() == 1 && ($obj = $res->getFirst()) instanceof NsmUserPreference) {
			return $obj;
		}
		
		throw new AppKitDoctrineException('Preference record not found!');
	}
	
	/**
	 * Returns the real value of a preference 
	 * @param string $key
	 * @param mixed $default
	 * @return mixed
	 * @author Marius Hein
	 */
	public function getPrefVal($key, $default=null) {
		try {
			return $this->getPrefObject($key)->upref_val;
		}
		catch (AppKitDoctrineException $e) {
			return $default;
		}
	}
	
	public function getPrefComponent($key, $component_name) {
		$val = $this->getPrefVal($key);
		if ($val) {
			return Doctrine::getTable($component_name)->find($val);
		}
		
		return null;
	}
	
	/**
	 * Deletes a pref value from the user
	 * @param string $key
	 * @return boolean if something was deleted
	 * @author Marius Hein
	 */
	public function delPref($key) {
		$test = Doctrine_Query::create()
		->delete('NsmUserPreference p')
		->where('p.upref_user_id=? and p.upref_key=?', array($this->user_id, $key))
		->limit(1)
		->execute();
		
		if ($test) return true;
		else return false;
	}
	
	public function getPreferences() {
		$res = Doctrine_Query::create()
		->select('p.upref_val, p.upref_key')
		->from('NsmUserPreference p INDEXBY p.upref_key')
		->where('p.upref_user_id=?', array($this->user_id))
		->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		$out = array();
		foreach ($res as $key=>$d) $out[$key] = $d['upref_val'];
		
		return $out;
	}
	
	public function getPreferencesList(array $list=array()) {
		$res = Doctrine_Query::create()
		->select('p.upref_val, p.upref_key')
		->from('NsmUserPreference p INDEXBY p.upref_key')
		->where('p.upref_user_id=?', array($this->user_id))
		->andWhereIn('p.upref_key', $list)
		->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		$out = array();
		foreach ($res as $key=>$d) $out[$key] = $d['upref_val'];
		
		return $out;
	}

}