<?xml version="1.0" encoding="UTF-8"?>

<project name="ModuleInstaller" default="usage">


	<!-- The module-install task -->
	<target name="install"> 
		
		<!--  Show metadata and let the user confirm -->
		<taskdef name="manifestMetaReader" classname="bin.manifestMetaReaderTask"/>
		<manifestMetaReader file="manifest.xml" />
		<echo>Install script for Icinga-web Modules</echo>
		<echo>-------------------------------------</echo>
		<echo>Module Name	${MODULE_Name}</echo>
		<echo>Version		${MODULE_Version}</echo>
		<echo>${MODULE_Description}</echo>
		<echo>Author		${MODULE_Author}</echo>
		<echo>Company		${MODULE_Company}</echo>
		<echo>-------------------------------------</echo>
		
		<!--  Confirmations -->
		<input propertyname="confirm" promptChar="?" defaultValue="y" validArgs="y,n">Do you want to install this module?</input>
		<if>
			<equals arg1="${confirm}" arg2="n" />
			<then>
				<fail message="Installation aborted by user." />
 			</then>
		</if>
		<input propertyname="PATH_Icinga" promptChar="?" defaultValue="/usr/local/icinga-web">Location of icinga-web</input>
		
		
		<!--  Check dependencies -->
		<taskdef name="manifestDependencyChecker" classname="bin.manifestDependencyCheckerTask"/>
		<manifestDependencyChecker file="manifest.xml"/>
		
		<!-- Install module and additional -->		
		<echo>Installing to ${PATH_Icinga}</echo>
		<copy todir="${PATH_Icinga}">
			<fileset dir="src">
				<exclude name="snippets.dat"></exclude>
				<exclude name="routes.xml"></exclude>
				<include name="**" />
			</fileset>
		</copy>	

		<!--  Doctrine models -->
		<echo>Copying Doctrine-Models</echo>
		<copy todir="${PATH_Icinga}/${PATH_AppKit}/database/models/">
			<fileset dir="etc/doctrine">
				<include name="**" />
			</fileset>
		</copy>
		
		<echo>Inserting snippets</echo>
		<!-- Inject snippets -->
		<taskdef name="snippetInjector" classname="bin.snippetInjectorTask" />
		<snippetInjector file="src/snippets.dat" />

		<echo>Setting up Agavi-Config</echo>		
		<!-- Extend agavi Config -->
		<taskdef name="manifestAgaviConfigurator" classname="bin.manifestAgaviConfiguratorTask" />
		<manifestAgaviConfigurator file="manifest.xml" />

		<!-- Set up Doctrine -->
		<taskdef name="doctrineDBBuilder" classname="bin.doctrineDBBuilderTask" />
		<input propertyname="confirm" promptChar="?" defaultValue="y" validargs="y,n">Create tables</input>
		<if>
			<equals arg1="${confirm}" arg2="y" />
			<then>
				<doctrineDBBuilder models="etc/doctrine" action="create" ini="db.ini"/>
 			</then>
		</if>

		<!--  Run SQL -->
		<taskdef name="sqlRunner" classname="bin.sqlRunnerTask" />
		<input propertyname="confirm" promptChar="?" defaultValue="y" validargs="y,n">Process sql queries?</input>
		<if>
			<equals arg1="${confirm}" arg2="y" />
			<then>
				<sqlRunner files="etc/sql" ini="db.ini"/>
 			</then>
		</if>		
		<property name="buildAdditional" value="false" />
		<available file="additional.xml" property="buildAdditional" value="true" />
		<if>
			<equals arg1="${buildAdditional}" arg2="1" />
			<then>
				<phing phingfile="additional.xml" inheritAll="true" />
			</then>
		</if>
	</target>

	
	<!-- 
			Remove Task
	 -->

	<target name="remove">
		<!-- Module deletion wizard -->
		<echo>Module Deletion Wizard</echo>
		<input propertyname="PATH_Icinga" promptChar="?" defaultValue="/usr/local/icinga-web">Location of icinga-web</input>
		<input propertyname="MODULE_Name" promptChar="?">Module name</input>
		
		<!-- 
				Check if module exists and let the user confirm the removal
		 -->
		<property name="module_exists" value="false"></property>
		
		<available file="${PATH_Icinga}/app/modules/${MODULE_Name}/manifest.xml" property="module_exists" value="true"/>
		<if>
			<equals arg1="${module_exists}" arg2="1"/>
			<then>
				<property name="manifest" value="${PATH_Icinga}/app/modules/${MODULE_Name}/manifest.xml"></property>
	
				<!--  Confirmations -->
				<input propertyname="confirm" promptChar="?" defaultValue="y" validArgs="y,n">Do you want to deinstall this module?</input>
				<if>
					<equals arg1="${confirm}" arg2="n" />
					<then>
						<fail message="Deinstallation aborted by user." />
		 			</then>
				</if>
			</then>
			<else>
				<fail message="${module_exists} Module does not exist. No Manifest found at ${PATH_Icinga}/app/modules/${MODULE_Name}/manifest.xml" />
			</else>
		</if>
		
		<!-- 
			
			Remove the registered routes
			
		 -->
		 
		<echo>Removing Routes</echo>
		<taskdef name="manifestRouteRemover" classname="bin.manifestRouteRemoverTask" />
		<manifestRouteRemover file="${manifest}" />

		<echo>Removing Config-Entries</echo>
		<taskdef name="manifestSettingsRemover" classname="bin.manifestSettingsRemoverTask" />
		<manifestSettingsRemover file="${manifest}"/>
		
		<echo>Removing Translation-domains</echo>
		<taskdef name="manifestXPathRemover" classname="bin.manifestXPathRemoverTask" />
		<manifestXPathRemover target="translation.xml" file="${manifest}" ns="default" uri="http://agavi.org/agavi/config/parts/translation/1.0" cfgPath="//Config/Translator/Domain" 
								removePath="//default:translator[@domain='%VALUE%']"/>
	
		<!-- 
			Remove the tables if the user wishes so
		 -->
		<taskdef name="doctrineDBBuilder" classname="bin.doctrineDBBuilderTask" />
		<input propertyname="confirm" promptChar="?" defaultValue="y" validargs="y,n">Remove tables</input>
		<if>
			<equals arg1="${confirm}" arg2="y" />
			<then>
				<echo>Removing tables</echo>
				<doctrineDBBuilder models="${PATH_Icinga}/app/modules/${MODULE_Name}/lib/.models.cfg" action="delete" ini="db.ini"/>
 			</then>
		</if>
		
		<echo>Removing files</echo>
		<delete dir="${PATH_Icinga}/app/modules/${MODULE_Name}" />	

		<echo>Module successfully deleted!</echo>
	</target>
		

	
	<!-- 
			**	Create Module  **	
	 -->
	<target name="module-create">
		<echo msg="Module creation tool for Icinga-web" />
		
		<input propertyname="coreDir">Module directory (containing manifest.xml) : </input>
		<echo msg="Searching for manifest file at : ${coreDir}" />
	
		<taskdef name="manifestFileSelector" classname="bin.manifestFileSelectorTask"/>
		<taskdef name="manifestSnippetExtractor" classname="bin.manifestSnippetExtractorTask"/>
		<taskdef name="manifestRouteExtractor" classname="bin.manifestRouteExtractorTask"/>
		<taskdef name="manifestTranslationExtractor" classname="bin.manifestTranslationExtractorTask"/>
		<taskdef name="manifestSettingsExtractor" classname="bin.manifestSettingsExtractorTask"/>
	
		<property name="manifest" value="${coreDir}/manifest.xml"></property>
		<manifestFileSelector file="${manifest}" source="Module" propertyName="module"/>
	 	<manifestFileSelector file="${manifest}" source="Doctrine" propertyName="models"/>
		<manifestFileSelector file="${manifest}" source="SQL" propertyName="sqlRoutines"/>
		
		<phingcall target="structure-create" />	
		
		<!-- Copy agavi module and config to src -->
	
		<echo>Saving module Data...</echo>		
		<copy todir="${MODULE_Name}/src">
			<fileset refid="module" />
			<mapper classname="bin.manifestMapper" from="${manifest}"/>
		</copy>
		
		
		<!-- Copy doctrine Models to etc/doctrine -->		
		<echo>Saving doctrine Models...</echo>	
		<copy todir="${MODULE_Name}/etc/doctrine">
			<fileset refid="models" />
			<mapper classname="bin.manifestMapper" from="${manifest}"/>
		</copy>
	
		<!--  Copy sql-routines to etc/sql -->
		<echo>Saving SQL-routines...</echo>	
		<copy todir="${MODULE_Name}/etc/sql">
			<fileset refid="sqlRoutines" />
			<mapper classname="bin.manifestMapper" from="${manifest}"/>
		</copy>
		
		<echo>Extracting snippets...</echo>
		<!-- Extract Stylesheets -->
		<manifestSnippetExtractor file="${manifest}" toFile="${MODULE_Name}/src/snippets.dat"></manifestSnippetExtractor>

		<echo>Extracting settings...</echo>		
		<manifestSettingsExtractor file="${manifest}" toFile="${MODULE_Name}/src/"></manifestSettingsExtractor>

		<echo>Extracting routes...</echo>		
		<manifestRouteExtractor file="${manifest}" toFile="${MODULE_Name}/src/routes.xml"></manifestRouteExtractor>
	
		<echo>Extracting translations...</echo>		
		<manifestTranslationExtractor file="${manifest}" toFile="${MODULE_Name}/src/translations.xml" />
			
		<!-- Creating Manifest -->
		<copy file="${manifest}" tofile="${MODULE_Name}/manifest.xml"/>
		
		<!-- Deploying installer -->
		<copy file="build.xml" tofile="${MODULE_Name}/build.xml"/>
		<copy todir="${MODULE_Name}/bin">
			<fileset dir="./bin">
				<include name="**" />
			</fileset>
		</copy>
		<copy file="etc/db.ini" todir="${MODULE_Name}/" />
		
		<!-- Packing -->
		<tar basedir="${MODULE_Name}/." destfile="${MODULE_Name}_module.tar" compression="gzip" />
		
		<!-- <delete dir="${MODULE_Name}" />  -->
	</target>
	
	<target name="export-cronk">
		<taskdef name="settingsExtractor" classname="bin.settingsExtractorTask"/>
		<taskdef name="cronkMetaExtractor" classname="bin.cronkMetaExtractorTask"/>

		<echo>Cronk-export wizard</echo>
		<input propertyname="cronkName" promptChar="?">Name of the cronk</input>
		
		<phingcall target="cronk-structure-create" />
		
		<settingsExtractor file="app/modules/Cronks/config/cronks.xml" useAbsolute="true" setting="" parameter="${cronkName}" toFile="${cronkName}/src/cronks"></settingsExtractor>
		<cronkMetaExtractor file="${cronkName}/src/cronks.xml"></cronkMetaExtractor>		
		
		<echo>Saving Action</echo>	
		<copy todir="${cronkName}/src/">
			<fileset refid="cronkAction" />
		</copy>
		
		<echo>Saving templates</echo>	
		<copy todir="${cronkName}/xml/">
			<fileset refid="cronkTemplates" />
		</copy>
		
		<copy file="build.xml" tofile="${cronkName}/build.xml">
			<filterchain>
				<replacetokens begintoken="##" endtoken="##">
					<token key="CRONKNAME" value="${cronkName}" />		
				</replacetokens>
			</filterchain>
		</copy>
		<copy todir="${cronkName}/bin">
			<fileset dir="./bin">
				<include name="cronkMetaExtractorTask.php" />
				<include name="settingsInjectorTask.php" />
			</fileset>
		</copy>
	</target>
	
	<target name="import-cronk">
		<taskdef name="settingsInjector" classname="bin.settingsInjectorTask"/>
		<taskdef name="cronkMetaExtractor" classname="bin.cronkMetaExtractorTask"/>

		<echo>Cronk-import wizard</echo>
		<input propertyname="PATH_Icinga" promptChar="?" defaultValue="/usr/local/icinga-web">Location of icinga-web</input>
		
		<settingsInjector source="src/cronks.xml" cfg="${PATH_Icinga}/app/modules/Cronks/config/cronks.xml" settingsToImport="/##CRONKNAME##"/>		
		<copy todir="${PATH_Icinga}/app/modules/Cronks/">
			<fileset dir="./src">
				<include name="**"/>
				<exclude name="cronks.xml" />
			</fileset>
		</copy>
		<copy todir="${PATH_Icinga}/app/data/xml/">
			<fileset dir="./xml">
				<include name="*.xml"></include>
			</fileset>
		</copy>
	</target>
	
	
	<target name="cronk-structure-create" >
		<mkdir dir="${cronkName}"/>
		<mkdir dir="${cronkName}/src"/>	
		<mkdir dir="${cronkName}/xml"/>	
	</target>
	
	<target name="structure-create">
		<mkdir dir="${MODULE_Name}"/>
		<mkdir dir="${MODULE_Name}/src"/>
		<mkdir dir="${MODULE_Name}/doc"/>
		<mkdir dir="${MODULE_Name}/etc"/>
		<mkdir dir="${MODULE_Name}/etc/doctrine"/>
		<mkdir dir="${MODULE_Name}/etc/sql"/>
	</target>
	
	<target name="usage">
		<echo msg="Modules/cron creation and installation tool for Icinga-web" />
		<echo msg="Targets are: install, build, remove, mdoule-create, cronk-export" />
	</target>
</project>