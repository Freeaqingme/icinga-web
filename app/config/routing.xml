<?xml version="1.0" encoding="UTF-8"?>
<configurations xmlns="http://agavi.org/agavi/1.0/config">
  <configuration>
	 <routes>
			<!-- INDEX -->
			<route name="index_page" pattern="^/$" module="Web" action="Icinga.PortalView"/>
			<!-- ICINGAAppKit routes -->
			<route name="appkit" pattern="^/appkit" module="%actions.default_module%">
			  <!-- Get an image -->
			  <route name=".image" pattern="^/image/(image:[\w\d-_\/\.]+)$" action="Widgets.ShowImage" output_type="image"/>
			  <!-- <route name="appkit.login" pattern="^/login" action="Login"/> -->
			  <route name=".login" pattern="^/login" action="AjaxLogin">
				 <route name=".provider" pattern="^/json" output_type="json"/>
			  </route>
			  <route name=".logout" pattern="^/logout" action="Logout"/>
			  <route name=".about" pattern="^/about" action="%actions.default_action%"/>
			  <route name=".squishloader" pattern="^/squishloader/(type:([\w\.\-\_\s]+))" action="Widgets.SquishLoader" output_type="simplecontent"/>
			  <!-- AJAX handlers -->
			  <!-- 
						@todo should be removed
					-->
			  <route name=".ajax" pattern="^/ajax">
				 <route name=".autocomplete" pattern="^/autocomplete/(type:[\w\._]+)" action="Ajax.AutoComplete" output_type="json"/>
				 <route name=".fs" pattern="^/fs/(type:[\w\._]+)" action="Ajax.FileSource" output_type="ajax"/>
				 <route name=".test" pattern="^/test" action="Ajax.Test"/>
			  </route>
			  <route name="appkit.admin" pattern="^/admin" action="Admin.Index">
				 <route name=".principaledit" pattern="^/principaleditor" action="Admin.PrincipalEditor" output_type="simplecontent"/>
				 <route name=".users" pattern="^/users" action="Admin.Users.Index">
					<route name=".edit" pattern="^/edit/(id:(\d+|new))" action="Admin.Users.Edit">
					  <route name=".simple" pattern="^/(container:\w+)$" output_type="simplecontent"/>
					</route>
					<route name=".alter" pattern="^/alter/(id:(\d+|new))$" output_type="simplecontent" action="Admin.Users.Edit"/>
					<route name=".remove" pattern="^/remove$" output_type="simplecontent" action="Admin.Users.Remove"/>
				 </route>
				 <route name=".groups" pattern="^/groups" action="Admin.Groups.Index">
					<route name=".edit" pattern="^/edit/(id:(\d+|new))" action="Admin.Groups.Edit">
					  <route name=".simple" pattern="^/(container:\w+)$" output_type="simplecontent"/>
					</route>
					<route name=".alter" pattern="^/alter/(id:(\d+|new))$" output_type="simplecontent" action="Admin.Groups.Edit"/>
					<route name=".remove" pattern="^/remove$" output_type="simplecontent" action="Admin.Groups.Remove"/>
				 </route>
				 <route name=".logs" pattern="^/logs" action="Admin.ViewLogs"/>
			  </route>
			
			   <!-- Data Provider -->
			 <route name=".data" pattern="^/provider" output_type="json">
				<route name=".users" pattern="^/user" action="DataProvider.UserProvider">
				  <route pattern="^/(userId:\d+)" action="DataProvider.UserProvider"/>
				</route>
				<route name=".groups" pattern="^/groups" action="DataProvider.GroupProvider">
				  <route pattern="^/(groupId:\d+)" action="DataProvider.GroupProvider"/>
				</route>
				<route name=".principals" pattern="^/principals" action="DataProvider.PrincipalProvider">
				  <route name=".user" pattern="^/user/(userId:\d+)" action="DataProvider.PrincipalProvider"/>
				  <route name=".group" pattern="^/group/(groupId:\d+)" action="Admin.DataProvider.PrincipalProvider"/>
				</route>
				<route name=".languages" pattern="^/languages" action="DataProvider.LanguageProvider" />
			 </route>
			  <!-- 
						ExtJS specific content.
						* The app state from the database as json
						* Loading occasional used javascript on the fly
					-->
			  <route pattern="^/ext" name=".ext">
				 <route pattern="^/applicationState$" name=".applicationState" output_type="javascript" action="Ext.ApplicationState"/>
				 <route pattern="^/dynascript/(script:([\w-_\.]+))$" name=".dynamicScriptSource" output_type="javascript" action="Ext.DynamicJavascriptSource"/>
				 <route pattern="^/i18n$" name=".i18n" output_type="javascript" action="Ext.initI18n"/>
			  </route>
			</route>
			<!-- My routes (AppKit preferences) -->
			<route name="my" pattern="^/my" module="AppKit">
			  <route pattern="^$" action="User.Index"/>
			  <route name=".preferences" pattern="^/preferences">
				  <route name=".remove" pattern="^/({remove:remove})$" action="User.Preferences"/>
				 <route pattern="^$" action="User.Preferences"/>
			  </route>
			</route>
			<!-- ICINGA routes -->
			<route name="icinga" pattern="^/web" module="Web">
			  <!-- Icinga index route -->
			  <route name=".home" pattern="^$" action="Index"/>
			  <route name=".about" pattern="^/about$" action="Icinga.Help" output_type="simplecontent"/>
			  <!-- The main view -->
			  <route name=".portalView" pattern="^/portal$" action="Icinga.PortalView"/>
			  <!--
						Cronks:
							* loader
							* json data sources
							* special content
					-->
			  <route pattern="^/cronks" name=".cronks" output_type="simplecontent" module="Cronks">
				 <!-- The cronkloader -->
				 <route name=".crloader" pattern="^/cloader/(cronk:([\w\.\-\_\s]+))" action="System.CronkLoader"/>
				 <!-- Datasources for the cronks -->
				 <route name=".crlisting.json" pattern="^/clisting/json" output_type="json" action="System.CronkListing"/>
				 <route name=".objectsearch.json" pattern="^/objectSearch/json" output_type="json" action="System.ObjectSearch"/>
				 <route name=".statusSummary.json" pattern="^/statusSummary/json" output_type="json" action="System.StatusSummary"/>
				 <route name=".statusMap.json" pattern="^/statusMap/json" output_type="json" action="System.StatusMap"/>
				 <route name=".statusMap" pattern="^/statusMap" action="System.StatusMap"/>
				 <route name=".staticContent.ajax" pattern="^/staticContent/(template:([\w\.\-\_\s]+))/ajax" output_type="ajax" action="System.StaticContent"/>
				 <route name=".viewProc" pattern="^/viewproc/(template:([\w\.\-\_\s]+))">
					<route name=".json" pattern="^/json" output_type="json" action="System.ViewProc">
					  <route name=".metaInfo" pattern="^/inf" action="System.ViewProc.MetaInformation"/>
					</route>
				 </route>
				 <!-- Commanddispatcher json interface -->
				 <route name=".commandProc" pattern="^/commandproc/(command:([\w_]+))/json" output_type="json">
					<route name=".metaInfo" pattern="^/inf" action="System.ViewProc.CommandMetaInformation"/>
					<route name=".send" pattern="^/send" action="System.ViewProc.SendCommand"/>
				 </route>
			  </route>
			  <route name=".simpleDataProvider.json" pattern="^/simpleDataProvider/json" output_type="json" action="IcingaApiSimpleDataProvider"/>
			</route>
		 </routes>
	  </configuration>
	  <configuration context="web">
		 <routes>
			<route name="heatmap" pattern="^/heatmap" module="Heatmap">
			  <route name=".mainView" pattern="^/$" action="Interface.overview"/>
			  <route name=".roomEditor" pattern="^/rooms">
				 <route name=".create" pattern="^/$" action="Interface.roomEditor"/>
				 <route name=".alter" pattern="^/(roomId:\w+)$" action="Interface.roomEditor"/>
			  </route>
			  <route name=".heatmapManager" pattern="^/heatmaps$" action="Interface.heatmapManager"/>
			  <!--  Data Provider -->
			  <route name=".data" pattern="^/data" output_type="json">
				 <route name=".serverRooms" pattern="^/serverRooms">
					<route name=".listing" pattern="^/list/json$" action="Backend.ServerRooms.listServer"/>
					<route name=".modifier" pattern="^/modify/(action:\w+)$" action="Backend.ServerRooms.modifyRoom"/>
				 </route>
				 <route name=".collectorPresets" pattern="^/collectorPresets">
					<route name=".listing" pattern="^/list/json$" action="Backend.CollectorPresets.listing"/>
					<route name=".modify" pattern="^/modify/(action:\w+)$" action="Backend.CollectorPresets.modify"/>
				 </route>
				 <route name=".heatmapPresets" pattern="^/heatmapPresets">
					<route name=".listing" pattern="^/list/json$" action="Backend.HeatmapPresets.listing"/>
					<route name=".modify" pattern="^/modify/(action:\w+)$" action="Backend.HeatmapPresets.modify"/>
				 </route>
				 <route name=".schedules" pattern="^/schedules">
					<route name=".listing" pattern="^/list/json$" action="Backend.Schedules.listing"/>
					<route name=".modify" pattern="^/modify/(action:\w+)$" action="Backend.Schedules.modify"/>
				 </route>
				 <route name=".icingaProvider" pattern="^/services/(source:\w+)/json$" action="Backend.icingaProvider"/>
				 <route name=".entityProvider" pattern="^/roomEntities">
					<route name=".listing" pattern="^/list/json$" action="Backend.Entities.listEntities"/>
				 </route>
				 <route name=".imageProvider" pattern="^/image/(scheduleId:\d+)$" action="Backend.imageProvider" output_type="image"/>
			  </route>
			  <route name=".states" pattern="^/states" output_type="json">
				 <route name=".overview" pattern="^/overview$" action="Backend.StateManager.overview"/>
			  </route>
			  <!--  includes -->
			  <route name=".includes" pattern="^/include" output_type="simplecontent">
				 <route name=".roomView" pattern="^/roomView$" action="Interface.RoomEditor.roomView"/>
				 <route name=".heatmapEditor" pattern="^/heatmapEditor$" action="Interface.heatmapEditor"/>
				 <route name=".scheduleEditor" pattern="^/scheduleEditor$" action="Interface.scheduleEditor"/>
			  </route>
			  <route name=".renderer" pattern="^/render">
				 <route name=".preview" pattern="/preview/(settings:[\W\w]+)$" action="Backend.renderer" output_type="image"/>
				 <route name=".render" pattern="/(scheduleId:\d+)(/(tstamp:\w+))?" action="Backend.renderer" output_type="image"/>
			  </route>
			</route>
		
		
	 </routes>
  </configuration>
  <configuration context="console">
	 <routes>
		<route name="Heatmap" pattern="^render" module="Heatmap">
		  <route name=".renderTarget" pattern="^ schedule=(scheduleId:\d+) fieldsize=(fieldsize:\d+)$" action="Console.renderHeatmap"/>
		</route>
	 </routes>
  </configuration>
</configurations>
