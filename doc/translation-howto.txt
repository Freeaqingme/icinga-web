Some abstract how icinga gettext translations works

1. Architecture

   Icinga's translation is made through an Agavi gettext implementation which
   uses po and mo files. Modules can have their own text domains. The default
   textdomain is 'default' (agavi: icinga.default).

   To keep js translation in sync we use jsgettext to provide the same way to
   translate things. Jsgettext uses JSON files compiled from the orginial po
   files.

2. Rebuild the message catalog

   If you wrote some code including some new texts that need to be translated
   you have to rebuild the 'default' messages catalog:

   	make loc-update-catalog

   This command creates a 'default.po' file in the 'res/i18n' directory,
   ready for translation.

3. Translate

   Translate the default.po into your language or merge this with existing po
   files to keep an existing translation in sync.

4. Compile mo files

   Gettext uses a compiled binary format of the po base files. To compile all
   existing files into machine readable objects try: make loc-create-mo

5. Compile JSON formats

   To use javascript translation you have to compile the po files into JSON
   files. To convert all existing po files try:

   	make loc-create-json

6. Change default interface behaviour

   To change the default local you have to alter app/config/translation.xml.

7. Directories

   Default Icinga translation files are stored in res/i18n with two subdirs:
   
   po: This directory contains a source translation file for each language. The
   name is something like 'en.po' or 'en_GB.po'.
   
   mo: Contains all compiled files e.g. 'en.po' or 'en.json'. Agavi uses the po
   files while JavaScript uses the JSON files with the same country or language
   base.
